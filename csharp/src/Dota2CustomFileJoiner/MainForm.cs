using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Threading;

namespace Dota2CustomFileJoiner
{

    public partial class MainForm : Form
    {
        /// <summary>
        ///  application start-up directory
        /// </summary>
        private static string curDir;

        /// <summary>
        /// a line of comment sperator "Valve Style" xD
        /// </summary>
        private static string commentSperator = "//==================================================================================================";

        /// <summary>
        /// checkbox status
        /// </summary>
        private static bool cIgnoreDisabled, cIgnoreSyntaxError, cShowErrorMsg, cBackupOldFile;

        /// <summary>
        /// the "console" output box
        /// </summary>
        private static RichTextBox _console;

        public MainForm()
        {
            InitializeComponent();

            // catch the application startup path
            curDir = Application.StartupPath;
           
            // ensure the execuatble file is placed into the "scripts/npc" folder
            if (!(curDir.Contains("npc") || curDir.Contains("Debug")))
            {
                MessageBox.Show("put this under \"scripts/npc\" path");
                Thread.CurrentThread.Abort();
            }
            
            // set the button enabled if the directory exists
            joinAbilitiesBtn.Enabled = Directory.Exists(curDir + "\\abilities");
            joinUnitsBtn.Enabled = Directory.Exists(curDir + "\\units");
            joinItemsBtn.Enabled = Directory.Exists(curDir + "\\items");
            joinHeroesBtn.Enabled = Directory.Exists(curDir + "\\heroes");
            joinAllBtn.Enabled = (joinAbilitiesBtn.Enabled || joinHeroesBtn.Enabled || joinItemsBtn.Enabled || joinUnitsBtn.Enabled);
            if (joinAbilitiesBtn.Enabled)
                joinAllBtn.Click += joinAbilitiesBtn_Click;
            if (joinUnitsBtn.Enabled)
                joinAllBtn.Click += joinUnitsBtn_Click;
            if (joinItemsBtn.Enabled)
                joinAllBtn.Click += joinItemsBtn_Click;
            if (joinHeroesBtn.Enabled)
                joinAllBtn.Click += joinHeroesBtn_Click;

            // setup console output
            _console = console;
            if (checkScrollConsole.Checked)
                _console.TextChanged += _console_TextChanged;
        }

        #region joiner

        /// <summary>
        /// generate the npc_****_custom.txt file from each folder
        /// </summary>
        /// <param name="folder">folder name, { "abilities", "units", "items", "heroes"}</param>
        /// <param name="filename">file name, npc_***_custom.txt</param>
        /// <param name="key">file start symbol, {"DOTAAbilities", "DOTAUnits", "DOTAHeroes"</param>
        /// <returns>success or failed message</returns>
        private static string generateFileFromFolder(string folder, string filename, string key)
        {
            var prefix = "Generate " + filename + " from folder " + folder;
            
            var filepath = curDir + "\\" + filename;
            var folderpath = curDir + "\\" + folder;

            _console.AppendText("\nBegin to generate for file " + filename);
            _console.AppendText("\nBegin to generate from folder " + folder);

            // if the folder is not exist, exit
            if (!Directory.Exists(folderpath))
                return prefix + "Failed! folder not found";

            // create the string builder
            StringBuilder sb = new StringBuilder("// This File is generated by Dota2CustomFIleJoiner in C# by XavierCHN\n");
            
            // create the file header
            sb.AppendLine("\"" + key + "\"");
            sb.AppendLine("{");

            try
            {
                List<string> block = new List<string>();

                // catch every file inside the folder to string list
                AddEveryFileFromFolderToBlock(folderpath, ref block);

                // append all the strings to the string builder
                foreach( string b in block)
                    sb.AppendLine("\t" + b);
                sb.AppendLine("}");

                // if the npc_***_custom.txt already exists
                // backup if checked
                // then delete it
                if (File.Exists(curDir + "\\" + filename))
                {
                    if (cBackupOldFile)
                    {
                        if (File.Exists(filepath + ".backup"))
                            File.Delete(filepath + ".backup");
                        File.Copy(filepath, filepath + ".backup");
                    }
                    _console.AppendText("\nDeleting existed file " + filename.Substring(filename.LastIndexOf("\\") + 1));
                    File.Delete(filepath);
                }

                // create the npc_****_custom.txt file
                File.Create(filepath).Close();

                // write all text to it
                File.WriteAllText(filepath, sb.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
                return "Error Occured!" + ex.ToString();
            }
            return prefix + "\t\t******  Success  ******";
        }

        /// <summary>
        /// Recursive method to read every file inside the given folder
        /// </summary>
        /// <param name="folderpath">folder path</param>
        /// <param name="block">readed string list</param>
        private static void AddEveryFileFromFolderToBlock(string folderpath, ref List<string> block)
        {
            // read all files from the subdirectories
            string[] directories = Directory.GetDirectories(folderpath);
            foreach (string p in directories)
                AddEveryFileFromFolderToBlock(p, ref block);

            // get every text file(*.txt from the folder)
            string[] files = Directory.GetFiles(folderpath, "*.txt", SearchOption.TopDirectoryOnly);

            // copy every line from the file, add prefix and comment lines
            foreach (string f in files)
            {
                // read all lines
                string[] kvData = File.ReadAllLines(f);
                
                // syntax check, not finished yet
                if (cIgnoreDisabled)
                    if (f.StartsWith("_"))
                        continue;
                if (cIgnoreSyntaxError)
                    if (SyntaxError(f, kvData, cShowErrorMsg))
                        continue;

                // comment lines       
                block.Add("");
                block.Add(commentSperator);
                block.Add("// Start of block from file: " + f.Substring(f.LastIndexOf("npc") + 4));
                block.Add(commentSperator);
                _console.AppendText("\nBegin to add block from file " + f.Substring(f.LastIndexOf("\\") + 1));
                
                // copy every line
                for (int i = 0; i < kvData.Length; i++)
                    block.Add(kvData[i]);
                
                // comment lines       
                block.Add(commentSperator);
                block.Add("// End of block from file: " + f.Substring(f.LastIndexOf("npc") + 4));
                block.Add(commentSperator);
                block.Add("");
            }
        }
        #endregion joiner
        #region syntax checker
        private static bool SyntaxError(string f, string[] kvData, bool cShowErrorMsg)
        {
            // todo: Key value syntax check
            if (cShowErrorMsg)
            {
                _console.AppendText("\nSyntax Error in file: " + f);
                MessageBox.Show("Syntax Error in file: " + f);
            }
            return false;
        }
        #endregion syntax checker
        #region button/checkbox events

        private void joinAbilitiesBtn_Click(object sender, EventArgs e)
        {
            _console.AppendText(generateFileFromFolder("abilities", "npc_abilities_custom.txt", "DOTAAbilities"));
        }

        private void joinUnitsBtn_Click(object sender, EventArgs e)
        {
            _console.AppendText(generateFileFromFolder("units", "npc_units_custom.txt", "DOTAUnits"));
        }

        private void joinHeroesBtn_Click(object sender, EventArgs e)
        {
            _console.AppendText(generateFileFromFolder("heroes", "npc_heroes_custom.txt", "DOTAHeroes"));
        }

        private void joinItemsBtn_Click(object sender, EventArgs e)
        {
            _console.AppendText(generateFileFromFolder("items", "npc_items_custom.txt", "DOTAAbilities"));
        }

        private void joinAllBtn_Click(object sender, EventArgs e)
        {

        }

        private void checkIgnoreDisabled_CheckedChanged(object sender, EventArgs e)
        {
            cIgnoreDisabled = checkIgnoreDisabled.Checked;
        }

        private void checkIgnoreSyntaxError_CheckedChanged(object sender, EventArgs e)
        {
            cIgnoreSyntaxError = checkIgnoreSyntaxError.Checked;
        }

        private void checkShowErrorMsg_CheckedChanged(object sender, EventArgs e)
        {
            cShowErrorMsg = checkShowErrorMsg.Checked;
        }

        private void MainForm_Load(object sender, EventArgs e)
        {

        }

        private void checkScrollConsole_CheckedChanged(object sender, EventArgs e)
        {
            if (checkScrollConsole.Checked)
                _console.TextChanged += _console_TextChanged;
            else
                _console.TextChanged -= _console_TextChanged;
        }

        private void checkBackupOldFile_CheckedChanged(object sender, EventArgs e)
        {
            cBackupOldFile = checkBackupOldFile.Checked;
        }
        void _console_TextChanged(object sender, EventArgs e)
        {
            var box = (RichTextBox)sender;
            box.ScrollToCaret();
        }

         #endregion button/checkbox events
    }
}
